Compreendido! Vou detalhar cada tabela, seus campos e as relações entre eles, para que você tenha uma visão completa do design do banco de dados.

---

### **Tabelas Globais (Configurações do Sistema)**

**1. `establishment_types`**
*   **Objetivo**: Armazena os tipos de estabelecimentos que o sistema pode gerenciar.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único do tipo de estabelecimento.
    *   `name`: `varchar(255)` (Não Nulo, Único) - Nome do tipo de estabelecimento (ex: 'Restaurante', 'Bar', 'Pizzaria').
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `establishments.establishment_type_id` -> `establishment_types.id` (Um tipo de estabelecimento pode ser associado a muitos estabelecimentos).

**2. `subscription_plans`**
*   **Objetivo**: Define os diferentes planos de assinatura disponíveis para os estabelecimentos.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único do plano de assinatura.
    *   `name`: `varchar(255)` (Não Nulo, Único) - Nome do plano (ex: 'Básico', 'Premium', 'Enterprise').
    *   `description`: `text` - Descrição detalhada do plano.
    *   `price`: `decimal(10, 2)` (Não Nulo) - Preço mensal ou anual do plano.
    *   `features`: `jsonb` - Funcionalidades incluídas no plano, em formato JSON.
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `establishments.subscription_plan_id` -> `subscription_plans.id` (Um plano de assinatura pode ser associado a muitos estabelecimentos).

**3. `roles`**
*   **Objetivo**: Lista as funções hierárquicas dos usuários dentro do sistema.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único da função.
    *   `name`: `varchar(255)` (Não Nulo, Único) - Nome da função (ex: 'Proprietário', 'Gerente', 'Garçom', 'Cozinheiro').
    *   `description`: `text` - Descrição da função.
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `users.role_id` -> `roles.id` (Uma função pode ser atribuída a muitos usuários).
    *   `role_permissions.role_id` -> `roles.id` (Uma função pode ter muitas permissões).

**4. `permissions`**
*   **Objetivo**: Define permissões granulares para módulos e ações do sistema.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único da permissão.
    *   `name`: `varchar(255)` (Não Nulo, Único) - Nome da permissão (ex: 'create_product', 'view_reports', 'manage_stock').
    *   `description`: `text` - Descrição da permissão.
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `role_permissions.permission_id` -> `permissions.id` (Uma permissão pode ser associada a muitas funções).

**5. `role_permissions`**
*   **Objetivo**: Associa permissões a funções, definindo o que cada função pode fazer.
*   **Campos**:
    *   `role_id`: `integer` (Não Nulo, Chave Primária Composta) - Referencia `roles.id`.
    *   `permission_id`: `integer` (Não Nulo, Chave Primária Composta) - Referencia `permissions.id`.
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `role_permissions.role_id` -> `roles.id` (Muitas permissões para uma função).
    *   `role_permissions.permission_id` -> `permissions.id` (Muitas funções para uma permissão).

---

### **Tabelas Específicas por Estabelecimento (Multi-tenant)**

**6. `establishments`**
*   **Objetivo**: Armazena informações detalhadas de cada estabelecimento (restaurante/bar), sendo a tabela central para o modelo multi-tenant.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único do estabelecimento.
    *   `name`: `varchar(255)` (Não Nulo) - Nome do estabelecimento.
    *   `cnpj`: `varchar(18)` (Único, Não Nulo) - CNPJ do estabelecimento.
    *   `establishment_type_id`: `integer` (Não Nulo) - Referencia `establishment_types.id`.
    *   `address_street`: `varchar(255)` (Não Nulo) - Rua do endereço.
    *   `address_number`: `varchar(50)` (Não Nulo) - Número do endereço.
    *   `address_complement`: `varchar(255)` - Complemento do endereço.
    *   `address_neighborhood`: `varchar(255)` (Não Nulo) - Bairro do endereço.
    *   `address_city`: `varchar(255)` (Não Nulo) - Cidade do endereço.
    *   `address_state`: `varchar(2)` (Não Nulo) - Estado do endereço (UF).
    *   `address_zip_code`: `varchar(10)` (Não Nulo) - CEP do endereço.
    *   `subscription_plan_id`: `integer` (Não Nulo) - Referencia `subscription_plans.id`.
    *   `operational_status`: `establishment_operational_status` (Não Nulo, Padrão: 'active') - Status operacional do estabelecimento (ativo, inativo, suspenso).
    *   `table_capacity`: `integer` - Capacidade total de mesas do estabelecimento.
    *   `accepts_delivery`: `boolean` (Não Nulo, Padrão: `false`) - Indica se o estabelecimento aceita delivery.
    *   `accepts_reservations`: `boolean` (Não Nulo, Padrão: `false`) - Indica se o estabelecimento aceita reservas.
    *   `service_fee_percentage`: `decimal(5, 2)` (Padrão: `0.00`) - Percentual da taxa de serviço cobrada.
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `establishments.establishment_type_id` -> `establishment_types.id` (Um estabelecimento tem um tipo).
    *   `establishments.subscription_plan_id` -> `subscription_plans.id` (Um estabelecimento tem um plano de assinatura).
    *   É referenciada por quase todas as outras tabelas específicas de um estabelecimento (ex: `operating_hours`, `users`, `environments`, `menu_categories`, `products`, `orders`, `suppliers`, `stock_categories`, `recipes`, `payment_methods`, `cash_sessions`, `expenses`, `customers`, `loyalty_programs`, `events`, `delivery_platforms`, `customer_feedback`, `quality_control_checks`).

**7. `operating_hours`**
*   **Objetivo**: Configura os horários de funcionamento diários para cada estabelecimento.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único do horário de funcionamento.
    *   `establishment_id`: `integer` (Não Nulo) - Referencia `establishments.id`.
    *   `day_of_week`: `day_of_week` (Não Nulo) - Dia da semana (segunda, terça, etc.).
    *   `opening_time`: `time` - Horário de abertura.
    *   `closing_time`: `time` - Horário de fechamento.
    *   `is_closed`: `boolean` (Não Nulo, Padrão: `false`) - Indica se o estabelecimento está fechado neste dia.
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `operating_hours.establishment_id` -> `establishments.id` (Um estabelecimento tem muitos horários de funcionamento).

**8. `users`**
*   **Objetivo**: Armazena informações dos usuários (funcionários) e integra com o Supabase Auth.
*   **Campos**:
    *   `id`: `uuid` (Chave Primária, Padrão: `gen_random_uuid()`) - ID do usuário, integrado com Supabase Auth.
    *   `establishment_id`: `integer` (Não Nulo) - Referencia `establishments.id`.
    *   `full_name`: `varchar(255)` (Não Nulo) - Nome completo do funcionário.
    *   `email`: `varchar(255)` (Não Nulo, Único por estabelecimento) - Email do funcionário.
    *   `phone_number`: `varchar(20)` - Número de telefone.
    *   `role_id`: `integer` (Não Nulo) - Referencia `roles.id`.
    *   `salary`: `decimal(10, 2)` - Salário do funcionário.
    *   `admission_date`: `date` - Data de admissão.
    *   `status`: `user_status` (Não Nulo, Padrão: 'active') - Status do usuário (ativo, inativo, suspenso).
    *   `last_login_at`: `timestamp` - Data e hora do último login.
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `users.establishment_id` -> `establishments.id` (Um estabelecimento tem muitos usuários).
    *   `users.role_id` -> `roles.id` (Um usuário tem uma função).
    *   É referenciada por: `user_activity_log.user_id`, `orders.waiter_id`, `stock_movements.responsible_user_id`, `cash_sessions.opened_by_user_id`, `expenses.paid_by_user_id`, `quality_control_checks.checked_by_user_id`.

**9. `user_activity_log`**
*   **Objetivo**: Registra as atividades dos usuários para auditoria e segurança.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único do log.
    *   `user_id`: `uuid` (Não Nulo) - Referencia `users.id`.
    *   `establishment_id`: `integer` (Não Nulo) - Referencia `establishments.id`.
    *   `action`: `varchar(255)` (Não Nulo) - Ação realizada pelo usuário (ex: 'logged_in', 'created_order', 'updated_product').
    *   `details`: `jsonb` - Detalhes adicionais da ação em formato JSON.
    *   `ip_address`: `varchar(45)` - Endereço IP de onde a ação foi realizada.
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora da ação.
*   **Relações**:
    *   `user_activity_log.user_id` -> `users.id` (Um usuário pode ter muitos registros de atividade).
    *   `user_activity_log.establishment_id` -> `establishments.id` (Um estabelecimento tem muitos registros de atividade).

**10. `environments`**
*   **Objetivo**: Define ambientes personalizados dentro de um estabelecimento.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único do ambiente.
    *   `establishment_id`: `integer` (Não Nulo) - Referencia `establishments.id`.
    *   `name`: `varchar(255)` (Não Nulo, Único por estabelecimento) - Nome do ambiente (ex: 'Salão Principal', 'Terraço', 'Área VIP').
    *   `max_capacity`: `integer` - Capacidade máxima de pessoas para este ambiente.
    *   `layout_x`: `integer` - Coordenada X para layout visual.
    *   `layout_y`: `integer` - Coordenada Y para layout visual.
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `environments.establishment_id` -> `establishments.id` (Um estabelecimento pode ter muitos ambientes).
    *   `tables.environment_id` -> `environments.id` (Um ambiente pode ter muitas mesas).

**11. `tables`**
*   **Objetivo**: Gerencia as mesas físicas dentro dos ambientes do estabelecimento.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único da mesa.
    *   `establishment_id`: `integer` (Não Nulo) - Referencia `establishments.id`.
    *   `environment_id`: `integer` (Não Nulo) - Referencia `environments.id`.
    *   `table_number`: `varchar(50)` (Não Nulo, Único por estabelecimento) - Número ou identificação única da mesa.
    *   `shape`: `table_shape` (Não Nulo) - Formato da mesa (redonda, quadrada, retangular, balcão).
    *   `capacity`: `integer` (Não Nulo) - Capacidade de pessoas da mesa.
    *   `status`: `table_status` (Não Nulo, Padrão: 'available') - Status atual da mesa (disponível, ocupada, reservada, manutenção).
    *   `notes`: `text` - Observações especiais sobre a mesa.
    *   `layout_x`: `integer` - Coordenada X para layout visual.
    *   `layout_y`: `integer` - Coordenada Y para layout visual.
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `tables.establishment_id` -> `establishments.id` (Um estabelecimento tem muitas mesas).
    *   `tables.environment_id` -> `environments.id` (Uma mesa pertence a um ambiente).
    *   É referenciada por: `reservations.table_id`, `orders.table_id`.

**12. `reservations`**
*   **Objetivo**: Gerencia as reservas de clientes para mesas.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único da reserva.
    *   `establishment_id`: `integer` (Não Nulo) - Referencia `establishments.id`.
    *   `customer_name`: `varchar(255)` (Não Nulo) - Nome do cliente que fez a reserva.
    *   `customer_phone`: `varchar(20)` (Não Nulo) - Telefone do cliente.
    *   `customer_email`: `varchar(255)` - Email do cliente.
    *   `number_of_people`: `integer` (Não Nulo) - Número de pessoas na reserva.
    *   `reservation_date`: `date` (Não Nulo) - Data da reserva.
    *   `reservation_time`: `time` (Não Nulo) - Hora da reserva.
    *   `status`: `reservation_status` (Não Nulo, Padrão: 'confirmed') - Status da reserva (confirmada, cancelada, compareceu, não compareceu).
    *   `table_id`: `integer` - Referencia `tables.id` (Opcional, a mesa pode ser atribuída posteriormente).
    *   `notes`: `text` - Observações sobre a reserva.
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `reservations.establishment_id` -> `establishments.id` (Um estabelecimento tem muitas reservas).
    *   `reservations.table_id` -> `tables.id` (Uma reserva pode ser para uma mesa específica).

**13. `menu_categories`**
*   **Objetivo**: Organiza os itens do cardápio em categorias personalizadas.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único da categoria.
    *   `establishment_id`: `integer` (Não Nulo) - Referencia `establishments.id`.
    *   `name`: `varchar(255)` (Não Nulo, Único por estabelecimento) - Nome da categoria (ex: 'Entradas', 'Pratos Principais', 'Sobremesas', 'Bebidas').
    *   `description`: `text` - Descrição da categoria.
    *   `icon`: `varchar(255)` - Ícone para representação visual.
    *   `color`: `varchar(7)` - Cor para identificação visual (formato HEX).
    *   `display_order`: `integer` (Padrão: `0`) - Ordem de exibição no cardápio.
    *   `is_seasonal`: `boolean` (Não Nulo, Padrão: `false`) - Indica se a categoria é sazonal.
    *   `available_from`: `time` - Horário de início de disponibilidade (para categorias sazonais).
    *   `available_until`: `time` - Horário de fim de disponibilidade (para categorias sazonais).
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `menu_categories.establishment_id` -> `establishments.id` (Um estabelecimento tem muitas categorias de cardápio).
    *   `products.category_id` -> `menu_categories.id` (Uma categoria pode ter muitos produtos).

**14. `products`**
*   **Objetivo**: Armazena informações detalhadas sobre cada item do cardápio.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único do produto.
    *   `establishment_id`: `integer` (Não Nulo) - Referencia `establishments.id`.
    *   `category_id`: `integer` (Não Nulo) - Referencia `menu_categories.id`.
    *   `name`: `varchar(255)` (Não Nulo, Único por estabelecimento) - Nome do produto/prato.
    *   `description`: `text` - Descrição detalhada do produto.
    *   `ingredients`: `text` - Lista de ingredientes.
    *   `normal_price`: `decimal(10, 2)` (Não Nulo) - Preço normal do produto.
    *   `promotional_price`: `decimal(10, 2)` - Preço promocional (se houver).
    *   `is_promotional`: `boolean` (Não Nulo, Padrão: `false`) - Indica se o produto está em promoção.
    *   `calories`: `integer` - Informações nutricionais: calorias.
    *   `allergens`: `jsonb` - Informações para alérgicos em formato JSON.
    *   `is_vegetarian`: `boolean` (Não Nulo, Padrão: `false`) - Indica se é vegetariano.
    *   `is_vegan`: `boolean` (Não Nulo, Padrão: `false`) - Indica se é vegano.
    *   `is_gluten_free`: `boolean` (Não Nulo, Padrão: `false`) - Indica se é sem glúten.
    *   `is_lactose_free`: `boolean` (Não Nulo, Padrão: `false`) - Indica se é sem lactose.
    *   `preparation_time_minutes`: `integer` - Tempo estimado de preparo em minutos.
    *   `is_available`: `boolean` (Não Nulo, Padrão: `true`) - Indica se o produto está disponível para venda.
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `products.establishment_id` -> `establishments.id` (Um estabelecimento tem muitos produtos).
    *   `products.category_id` -> `menu_categories.id` (Um produto pertence a uma categoria).
    *   É referenciada por: `product_images.product_id`, `product_variations.product_id`, `combo_products.product_id`, `order_items.product_id`, `recipes.product_id`, `quality_control_checks.product_id`.

**15. `product_images`**
*   **Objetivo**: Armazena múltiplas imagens para um produto.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único da imagem.
    *   `product_id`: `integer` (Não Nulo) - Referencia `products.id`.
    *   `image_url`: `text` (Não Nulo) - URL da imagem do produto.
    *   `display_order`: `integer` (Padrão: `0`) - Ordem de exibição da imagem.
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `product_images.product_id` -> `products.id` (Um produto pode ter muitas imagens).

**16. `product_variations`**
*   **Objetivo**: Define tipos de variações para um produto (ex: tamanho, sabor, adicional).
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único da variação.
    *   `product_id`: `integer` (Não Nulo) - Referencia `products.id`.
    *   `name`: `varchar(255)` (Não Nulo, Único por produto) - Nome da variação (ex: 'Tamanho', 'Sabor', 'Ponto da Carne').
    *   `type`: `product_variation_type` (Não Nulo) - Tipo da variação (size, flavor, additional, preparation).
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `product_variations.product_id` -> `products.id` (Um produto pode ter muitas variações).
    *   `variation_options.variation_id` -> `product_variations.id` (Uma variação pode ter muitas opções).

**17. `variation_options`**
*   **Objetivo**: Define opções específicas para uma variação de produto.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único da opção de variação.
    *   `variation_id`: `integer` (Não Nulo) - Referencia `product_variations.id`.
    *   `option_name`: `varchar(255)` (Não Nulo, Único por variação) - Nome da opção (ex: 'Pequeno', 'Médio', 'Grande', 'Mal Passado', 'Bem Passado').
    *   `price_adjustment`: `decimal(10, 2)` (Padrão: `0.00`) - Ajuste de preço para esta opção (pode ser negativo).
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `variation_options.variation_id` -> `product_variations.id` (Uma opção pertence a uma variação).
    *   É referenciada por: `order_item_variations.variation_option_id`.

**18. `combos`**
*   **Objetivo**: Define combos de produtos com descontos.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único do combo.
    *   `establishment_id`: `integer` (Não Nulo) - Referencia `establishments.id`.
    *   `name`: `varchar(255)` (Não Nulo, Único por estabelecimento) - Nome do combo.
    *   `description`: `text` - Descrição do combo.
    *   `discount_percentage`: `decimal(5, 2)` (Não Nulo) - Percentual de desconto aplicado ao combo.
    *   `start_date`: `date` - Data de início da validade do combo.
    *   `end_date`: `date` - Data de fim da validade do combo.
    *   `is_active`: `boolean` (Não Nulo, Padrão: `true`) - Indica se o combo está ativo.
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `combos.establishment_id` -> `establishments.id` (Um estabelecimento pode ter muitos combos).
    *   `combo_products.combo_id` -> `combos.id` (Um combo pode ter muitos produtos).

**19. `combo_products`**
*   **Objetivo**: Associa produtos a combos específicos.
*   **Campos**:
    *   `combo_id`: `integer` (Não Nulo, Chave Primária Composta) - Referencia `combos.id`.
    *   `product_id`: `integer` (Não Nulo, Chave Primária Composta) - Referencia `products.id`.
    *   `quantity`: `integer` (Não Nulo, Padrão: `1`) - Quantidade do produto no combo.
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `combo_products.combo_id` -> `combos.id` (Muitos produtos para um combo).
    *   `combo_products.product_id` -> `products.id` (Um produto pode estar em muitos combos).

**20. `promotions`**
*   **Objetivo**: Gerencia vários tipos de promoções para o estabelecimento.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único da promoção.
    *   `establishment_id`: `integer` (Não Nulo) - Referencia `establishments.id`.
    *   `name`: `varchar(255)` (Não Nulo) - Nome da promoção.
    *   `description`: `text` - Descrição da promoção.
    *   `promotion_type`: `promotion_type` (Não Nulo) - Tipo da promoção (happy_hour, quantity_discount, loyalty_discount, specific_day).
    *   `discount_value`: `decimal(10, 2)` (Não Nulo) - Valor do desconto (fixo ou percentual).
    *   `discount_type`: `discount_type` (Não Nulo) - Tipo de desconto (percentage, fixed).
    *   `start_date`: `timestamp` (Não Nulo) - Data e hora de início da promoção.
    *   `end_date`: `timestamp` (Não Nulo) - Data e hora de fim da promoção.
    *   `is_active`: `boolean` (Não Nulo, Padrão: `true`) - Indica se a promoção está ativa.
    *   `min_quantity`: `integer` - Quantidade mínima para aplicar o desconto (para promoções de quantidade).
    *   `day_of_week`: `day_of_week` - Dia da semana para promoções específicas.
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `promotions.establishment_id` -> `establishments.id` (Um estabelecimento pode ter muitas promoções).

**21. `orders`**
*   **Objetivo**: Representa uma comanda ou pedido de cliente.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único do pedido.
    *   `establishment_id`: `integer` (Não Nulo) - Referencia `establishments.id`.
    *   `order_date`: `date` (Não Nulo, Padrão: `current_date`) - Data do pedido para numeração sequencial diária.
    *   `order_number`: `varchar(50)` (Não Nulo, Único por estabelecimento e data) - Número sequencial da comanda/pedido por dia.
    *   `order_type`: `order_type` (Não Nulo) - Tipo de serviço (local, counter, delivery, pickup).
    *   `table_id`: `integer` - Referencia `tables.id`.
    *   `waiter_id`: `uuid` - Referencia `users.id` (Funcionário responsável pelo atendimento).
    *   `customer_id`: `integer` - Referencia `customers.id` (Para fidelidade/delivery).
    *   `delivery_address_street`: `varchar(255)` - Rua do endereço de entrega.
    *   `delivery_address_number`: `varchar(50)` - Número do endereço de entrega.
    *   `delivery_address_complement`: `varchar(255)` - Complemento do endereço de entrega.
    *   `delivery_address_neighborhood`: `varchar(255)` - Bairro do endereço de entrega.
    *   `delivery_address_city`: `varchar(255)` - Cidade do endereço de entrega.
    *   `delivery_address_state`: `varchar(2)` - Estado do endereço de entrega (UF).
    *   `delivery_address_zip_code`: `varchar(10)` - CEP do endereço de entrega.
    *   `status`: `order_status` (Não Nulo, Padrão: 'open') - Status do pedido (aberta, enviada_cozinha, preparando, pronta, entregue, paga, cancelada).
    *   `subtotal`: `decimal(10, 2)` (Não Nulo, Padrão: `0.00`) - Subtotal dos itens do pedido.
    *   `service_fee_amount`: `decimal(10, 2)` (Não Nulo, Padrão: `0.00`) - Valor da taxa de serviço.
    *   `delivery_fee_amount`: `decimal(10, 2)` (Não Nulo, Padrão: `0.00`) - Valor da taxa de entrega.
    *   `discount_amount`: `decimal(10, 2)` (Não Nulo, Padrão: `0.00`) - Valor total de descontos aplicados.
    *   `total_amount`: `decimal(10, 2)` (Não Nulo, Padrão: `0.00`) - Valor total final do pedido.
    *   `notes`: `text` - Observações gerais sobre o pedido.
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `orders.establishment_id` -> `establishments.id` (Um estabelecimento tem muitos pedidos).
    *   `orders.table_id` -> `tables.id` (Um pedido pode estar associado a uma mesa).
    *   `orders.waiter_id` -> `users.id` (Um pedido pode ter um garçom responsável).
    *   `orders.customer_id` -> `customers.id` (Um pedido pode estar associado a um cliente).
    *   É referenciada por: `order_items.order_id`, `cash_session_movements.order_id`, `order_payments.order_id`, `customer_loyalty_transactions.order_id`, `delivery_platform_orders.order_id`, `customer_feedback.order_id`.

**22. `order_items`**
*   **Objetivo**: Detalha os produtos incluídos em um pedido.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único do item do pedido.
    *   `order_id`: `integer` (Não Nulo) - Referencia `orders.id`.
    *   `product_id`: `integer` (Não Nulo) - Referencia `products.id`.
    *   `quantity`: `integer` (Não Nulo) - Quantidade do produto.
    *   `unit_price`: `decimal(10, 2)` (Não Nulo) - Preço do produto no momento do pedido.
    *   `total_price`: `decimal(10, 2)` (Não Nulo) - Preço total para este item (quantidade * preço unitário).
    *   `status`: `order_item_status` (Não Nulo, Padrão: 'pending') - Status individual do item (pendente, preparando, pronto, entregue, cancelado).
    *   `notes`: `text` - Observações especiais para o item (ex: 'sem cebola', 'molho à parte').
    *   `cancellation_reason`: `text` - Motivo do cancelamento do item (se aplicável).
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `order_items.order_id` -> `orders.id` (Um pedido tem muitos itens).
    *   `order_items.product_id` -> `products.id` (Um item de pedido é um produto).
    *   É referenciada por: `order_item_variations.order_item_id`.

**23. `order_item_variations`**
*   **Objetivo**: Armazena as variações selecionadas para um item de pedido.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único da variação do item do pedido.
    *   `order_item_id`: `integer` (Não Nulo) - Referencia `order_items.id`.
    *   `variation_option_id`: `integer` (Não Nulo, Único por item de pedido) - Referencia `variation_options.id`.
    *   `price_adjustment`: `decimal(10, 2)` (Não Nulo, Padrão: `0.00`) - Ajuste de preço para esta opção específica no pedido.
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `order_item_variations.order_item_id` -> `order_items.id` (Um item de pedido pode ter muitas variações selecionadas).
    *   `order_item_variations.variation_option_id` -> `variation_options.id` (Uma variação de item de pedido é uma opção de variação).

**24. `suppliers`**
*   **Objetivo**: Gerencia informações sobre os fornecedores de produtos.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único do fornecedor.
    *   `establishment_id`: `integer` (Não Nulo) - Referencia `establishments.id`.
    *   `name`: `varchar(255)` (Não Nulo) - Nome do fornecedor.
    *   `cnpj_cpf`: `varchar(18)` (Único por estabelecimento, Não Nulo) - CNPJ ou CPF do fornecedor.
    *   `contact_person`: `varchar(255)` - Pessoa de contato na empresa do fornecedor.
    *   `phone`: `varchar(20)` - Telefone do fornecedor.
    *   `email`: `varchar(255)` - Email do fornecedor.
    *   `address_street`: `varchar(255)` - Rua do endereço.
    *   `address_number`: `varchar(50)` - Número do endereço.
    *   `address_complement`: `varchar(255)` - Complemento do endereço.
    *   `address_neighborhood`: `varchar(255)` - Bairro do endereço.
    *   `address_city`: `varchar(255)` - Cidade do endereço.
    *   `address_state`: `varchar(2)` - Estado do endereço (UF).
    *   `address_zip_code`: `varchar(10)` - CEP do endereço.
    *   `payment_terms`: `text` - Condições de pagamento.
    *   `special_conditions`: `text` - Condições comerciais especiais.
    *   `rating`: `decimal(3, 2)` - Avaliação do fornecedor (ex: 4.5).
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `suppliers.establishment_id` -> `establishments.id` (Um estabelecimento tem muitos fornecedores).
    *   É referenciada por: `stock_items.preferred_supplier_id`, `stock_batches.supplier_id`.

**25. `stock_categories`**
*   **Objetivo**: Categoriza os itens de estoque para melhor organização.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único da categoria de estoque.
    *   `establishment_id`: `integer` (Não Nulo) - Referencia `establishments.id`.
    *   `name`: `varchar(255)` (Não Nulo, Único por estabelecimento) - Nome da categoria de estoque (ex: 'Carnes', 'Bebidas', 'Descartáveis', 'Limpeza').
    *   `color`: `varchar(7)` - Cor para identificação visual (formato HEX).
    *   `parent_category_id`: `integer` - Referencia `stock_categories.id` (Para subcategorias, auto-referência).
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `stock_categories.establishment_id` -> `establishments.id` (Um estabelecimento tem muitas categorias de estoque).
    *   `stock_categories.parent_category_id` -> `stock_categories.id` (Uma categoria pode ter uma categoria pai).
    *   `stock_items.category_id` -> `stock_categories.id` (Uma categoria pode ter muitos itens de estoque).

**26. `stock_items`**
*   **Objetivo**: Armazena informações detalhadas sobre cada item no estoque.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único do item de estoque.
    *   `establishment_id`: `integer` (Não Nulo) - Referencia `establishments.id`.
    *   `category_id`: `integer` (Não Nulo) - Referencia `stock_categories.id`.
    *   `name`: `varchar(255)` (Não Nulo, Único por estabelecimento) - Nome do item de estoque.
    *   `description`: `text` - Descrição do item.
    *   `barcode`: `varchar(255)` (Único por estabelecimento) - Código de barras do item.
    *   `unit_of_measure`: `stock_item_unit_of_measure` (Não Nulo) - Unidade de medida (kg, liter, unit, gram, box).
    *   `storage_location`: `varchar(255)` - Local físico de armazenamento.
    *   `min_stock_level`: `integer` (Padrão: `0`) - Nível mínimo de estoque para alerta.
    *   `preferred_supplier_id`: `integer` - Referencia `suppliers.id`.
    *   `current_cost_price`: `decimal(10, 2)` - Custo atual do item em estoque.
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `stock_items.establishment_id` -> `establishments.id` (Um estabelecimento tem muitos itens de estoque).
    *   `stock_items.category_id` -> `stock_categories.id` (Um item de estoque pertence a uma categoria).
    *   `stock_items.preferred_supplier_id` -> `suppliers.id` (Um item de estoque pode ter um fornecedor preferencial).
    *   É referenciada por: `stock_batches.stock_item_id`, `stock_movements.stock_item_id`, `recipe_ingredients.stock_item_id`, `quality_control_checks.stock_item_id`.

**27. `stock_batches`**
*   **Objetivo**: Gerencia lotes específicos de itens de estoque, especialmente para perecíveis.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único do lote.
    *   `stock_item_id`: `integer` (Não Nulo) - Referencia `stock_items.id`.
    *   `supplier_id`: `integer` - Referencia `suppliers.id`.
    *   `batch_number`: `varchar(255)` (Único por item de estoque) - Número do lote.
    *   `quantity`: `integer` (Não Nulo) - Quantidade de itens neste lote.
    *   `expiration_date`: `date` - Data de validade do lote.
    *   `purchase_price`: `decimal(10, 2)` (Não Nulo) - Preço de compra por unidade neste lote.
    *   `entry_date`: `date` (Não Nulo) - Data de entrada do lote no estoque.
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `stock_batches.stock_item_id` -> `stock_items.id` (Um item de estoque pode ter muitos lotes).
    *   `stock_batches.supplier_id` -> `suppliers.id` (Um lote pode ter um fornecedor).

**28. `stock_movements`**
*   **Objetivo**: Registra todas as movimentações de itens de estoque.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único da movimentação.
    *   `establishment_id`: `integer` (Não Nulo) - Referencia `establishments.id`.
    *   `stock_item_id`: `integer` (Não Nulo) - Referencia `stock_items.id`.
    *   `movement_type`: `stock_movement_type` (Não Nulo) - Tipo de movimento (entry, exit, adjustment, loss, transfer).
    *   `quantity`: `integer` (Não Nulo) - Quantidade movimentada.
    *   `reference_document`: `varchar(255)` - Documento de referência (ex: NF, requisição).
    *   `responsible_user_id`: `uuid` - Referencia `users.id` (Funcionário que executou a movimentação).
    *   `reason`: `stock_movement_reason` - Motivo detalhado da movimentação (sale, loss, expiration, breakage, free_sample, purchase, consumption).
    *   `cost_at_movement`: `decimal(10, 2)` (Não Nulo) - Custo do item no momento da movimentação.
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora da movimentação.
*   **Relações**:
    *   `stock_movements.establishment_id` -> `establishments.id` (Um estabelecimento tem muitas movimentações de estoque).
    *   `stock_movements.stock_item_id` -> `stock_items.id` (Uma movimentação é para um item de estoque).
    *   `stock_movements.responsible_user_id` -> `users.id` (Uma movimentação é realizada por um usuário).

**29. `recipes`**
*   **Objetivo**: Define a composição de um produto do cardápio.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único da receita.
    *   `establishment_id`: `integer` (Não Nulo) - Referencia `establishments.id`.
    *   `product_id`: `integer` (Não Nulo, Único) - Referencia `products.id` (Produto final que esta receita produz).
    *   `name`: `varchar(255)` (Não Nulo) - Nome da receita (ex: 'Receita de Pizza Margherita').
    *   `description`: `text` - Descrição da receita.
    *   `preparation_instructions`: `text` - Instruções de preparo.
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `recipes.establishment_id` -> `establishments.id` (Um estabelecimento tem muitas receitas).
    *   `recipes.product_id` -> `products.id` (Uma receita é para um produto).
    *   `recipe_ingredients.recipe_id` -> `recipes.id` (Uma receita tem muitos ingredientes).

**30. `recipe_ingredients`**
*   **Objetivo**: Associa itens de estoque como ingredientes a receitas.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único do ingrediente da receita.
    *   `recipe_id`: `integer` (Não Nulo) - Referencia `recipes.id`.
    *   `stock_item_id`: `integer` (Não Nulo, Único por receita) - Referencia `stock_items.id`.
    *   `quantity_needed`: `decimal(10, 3)` (Não Nulo) - Quantidade exata do ingrediente necessária.
    *   `unit_of_measure`: `stock_item_unit_of_measure` (Não Nulo) - Unidade de medida para este ingrediente na receita.
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `recipe_ingredients.recipe_id` -> `recipes.id` (Muitos ingredientes para uma receita).
    *   `recipe_ingredients.stock_item_id` -> `stock_items.id` (Um ingrediente de receita é um item de estoque).

**31. `payment_methods`**
*   **Objetivo**: Configura as formas de pagamento disponíveis para um estabelecimento.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único da forma de pagamento.
    *   `establishment_id`: `integer` (Não Nulo) - Referencia `establishments.id`.
    *   `name`: `varchar(255)` (Não Nulo, Único por estabelecimento) - Nome da forma de pagamento (ex: 'Dinheiro', 'Cartão de Crédito', 'PIX').
    *   `type`: `payment_method_type` (Não Nulo) - Tipo da forma de pagamento (cash, credit_card, debit_card, pix, digital_wallet, meal_voucher).
    *   `operator_fee_percentage`: `decimal(5, 2)` (Padrão: `0.00`) - Taxa percentual da operadora (se aplicável).
    *   `receipt_term_days`: `integer` (Padrão: `0`) - Prazo de recebimento em dias (D+0, D+1, D+30).
    *   `is_active`: `boolean` (Não Nulo, Padrão: `true`) - Indica se a forma de pagamento está ativa.
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `payment_methods.establishment_id` -> `establishments.id` (Um estabelecimento tem muitas formas de pagamento).
    *   É referenciada por: `cash_session_movements.payment_method_id`, `order_payments.payment_method_id`.

**32. `cash_sessions`**
*   **Objetivo**: Gerencia as sessões diárias de caixa.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único da sessão de caixa.
    *   `establishment_id`: `integer` (Não Nulo) - Referencia `establishments.id`.
    *   `opened_by_user_id`: `uuid` (Não Nulo) - Referencia `users.id` (Funcionário que abriu o caixa).
    *   `opening_balance`: `decimal(10, 2)` (Não Nulo, Padrão: `0.00`) - Valor inicial do caixa.
    *   `closing_balance`: `decimal(10, 2)` - Valor final do caixa (calculado).
    *   `actual_cash_amount`: `decimal(10, 2)` - Valor em dinheiro contado no fechamento.
    *   `status`: `cash_session_status` (Não Nulo, Padrão: 'open') - Status da sessão (open, closed).
    *   `opening_time`: `timestamp` (Não Nulo, Padrão: `now()`) - Data e hora de abertura do caixa.
    *   `closing_time`: `timestamp` - Data e hora de fechamento do caixa.
    *   `notes`: `text` - Observações sobre a sessão de caixa.
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `cash_sessions.establishment_id` -> `establishments.id` (Um estabelecimento tem muitas sessões de caixa).
    *   `cash_sessions.opened_by_user_id` -> `users.id` (Uma sessão de caixa é aberta por um usuário).
    *   `cash_session_movements.cash_session_id` -> `cash_sessions.id` (Uma sessão de caixa tem muitas movimentações).

**33. `cash_session_movements`**
*   **Objetivo**: Registra todas as movimentações financeiras dentro de uma sessão de caixa.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único da movimentação de caixa.
    *   `cash_session_id`: `integer` (Não Nulo) - Referencia `cash_sessions.id`.
    *   `movement_type`: `cash_session_movement_type` (Não Nulo) - Tipo de movimento (sale, withdrawal, reinforcement, cancellation, expense).
    *   `payment_method_id`: `integer` - Referencia `payment_methods.id`.
    *   `amount`: `decimal(10, 2)` (Não Nulo) - Valor da movimentação.
    *   `order_id`: `integer` - Referencia `orders.id` (Para vendas/cancelamentos).
    *   `description`: `text` - Justificativa ou detalhes da movimentação.
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora da movimentação.
*   **Relações**:
    *   `cash_session_movements.cash_session_id` -> `cash_sessions.id` (Uma movimentação pertence a uma sessão de caixa).
    *   `cash_session_movements.payment_method_id` -> `payment_methods.id` (Uma movimentação pode usar uma forma de pagamento).
    *   `cash_session_movements.order_id` -> `orders.id` (Uma movimentação pode estar ligada a um pedido).

**34. `order_payments`**
*   **Objetivo**: Registra os pagamentos efetuados para um pedido, suportando pagamentos parciais e divididos.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único do pagamento do pedido.
    *   `order_id`: `integer` (Não Nulo) - Referencia `orders.id`.
    *   `payment_method_id`: `integer` (Não Nulo) - Referencia `payment_methods.id`.
    *   `amount_paid`: `decimal(10, 2)` (Não Nulo) - Valor pago com esta forma de pagamento.
    *   `transaction_id`: `varchar(255)` - ID da transação para pagamentos eletrônicos.
    *   `change_given`: `decimal(10, 2)` (Padrão: `0.00`) - Valor do troco dado (para pagamentos em dinheiro).
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `order_payments.order_id` -> `orders.id` (Um pedido pode ter muitos pagamentos).
    *   `order_payments.payment_method_id` -> `payment_methods.id` (Um pagamento usa uma forma de pagamento).

**35. `expenses`**
*   **Objetivo**: Registra as despesas operacionais do estabelecimento.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único da despesa.
    *   `establishment_id`: `integer` (Não Nulo) - Referencia `establishments.id`.
    *   `description`: `text` (Não Nulo) - Descrição da despesa.
    *   `amount`: `decimal(10, 2)` (Não Nulo) - Valor da despesa.
    *   `expense_date`: `date` (Não Nulo) - Data em que a despesa ocorreu.
    *   `category`: `varchar(255)` - Categoria da despesa (ex: 'Aluguel', 'Contas de Consumo', 'Manutenção').
    *   `paid_by_user_id`: `uuid` - Referencia `users.id` (Funcionário que registrou/pagou a despesa).
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `expenses.establishment_id` -> `establishments.id` (Um estabelecimento tem muitas despesas).
    *   `expenses.paid_by_user_id` -> `users.id` (Uma despesa pode ser registrada por um usuário).

**36. `customers`**
*   **Objetivo**: Gerencia dados de clientes para programas de fidelidade e personalização.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único do cliente.
    *   `establishment_id`: `integer` (Não Nulo) - Referencia `establishments.id`.
    *   `full_name`: `varchar(255)` (Não Nulo) - Nome completo do cliente.
    *   `email`: `varchar(255)` (Único por estabelecimento) - Email do cliente.
    *   `phone_number`: `varchar(20)` - Telefone do cliente.
    *   `birth_date`: `date` - Data de nascimento do cliente.
    *   `preferences`: `jsonb` - Preferências do cliente em formato JSON.
    *   `total_spent`: `decimal(10, 2)` (Padrão: `0.00`) - Total gasto pelo cliente no estabelecimento.
    *   `loyalty_points`: `integer` (Padrão: `0`) - Pontos de fidelidade acumulados.
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `customers.establishment_id` -> `establishments.id` (Um estabelecimento tem muitos clientes).
    *   É referenciada por: `orders.customer_id`, `customer_loyalty_transactions.customer_id`, `events.customer_id`, `customer_feedback.customer_id`.

**37. `loyalty_programs`**
*   **Objetivo**: Define as regras dos programas de fidelidade para um estabelecimento.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único do programa de fidelidade.
    *   `establishment_id`: `integer` (Não Nulo) - Referencia `establishments.id`.
    *   `name`: `varchar(255)` (Não Nulo, Único por estabelecimento) - Nome do programa de fidelidade.
    *   `points_per_currency_unit`: `decimal(10, 2)` (Não Nulo) - Quantos pontos são ganhos por unidade monetária gasta.
    *   `is_active`: `boolean` (Não Nulo, Padrão: `true`) - Indica se o programa está ativo.
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `loyalty_programs.establishment_id` -> `establishments.id` (Um estabelecimento pode ter muitos programas de fidelidade).
    *   É referenciada por: `loyalty_rewards.loyalty_program_id`, `customer_loyalty_transactions.loyalty_program_id`.

**38. `loyalty_rewards`**
*   **Objetivo**: Define as recompensas que podem ser resgatadas com pontos de fidelidade.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único da recompensa.
    *   `loyalty_program_id`: `integer` (Não Nulo) - Referencia `loyalty_programs.id`.
    *   `name`: `varchar(255)` (Não Nulo) - Nome da recompensa (ex: 'Desconto de 10%', 'Sobremesa Grátis').
    *   `description`: `text` - Descrição da recompensa.
    *   `points_cost`: `integer` (Não Nulo) - Custo em pontos para resgatar a recompensa.
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `loyalty_rewards.loyalty_program_id` -> `loyalty_programs.id` (Um programa de fidelidade tem muitas recompensas).
    *   É referenciada por: `customer_loyalty_transactions.reward_id`.

**39. `customer_loyalty_transactions`**
*   **Objetivo**: Rastreia os movimentos de pontos de fidelidade dos clientes.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único da transação de fidelidade.
    *   `customer_id`: `integer` (Não Nulo) - Referencia `customers.id`.
    *   `loyalty_program_id`: `integer` (Não Nulo) - Referencia `loyalty_programs.id`.
    *   `transaction_type`: `customer_loyalty_transaction_type` (Não Nulo) - Tipo da transação (earned, redeemed).
    *   `points_amount`: `integer` (Não Nulo) - Quantidade de pontos envolvidos na transação.
    *   `order_id`: `integer` - Referencia `orders.id` (Se os pontos foram ganhos de um pedido).
    *   `reward_id`: `integer` - Referencia `loyalty_rewards.id` (Se os pontos foram resgatados por uma recompensa).
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora da transação.
*   **Relações**:
    *   `customer_loyalty_transactions.customer_id` -> `customers.id` (Um cliente tem muitas transações de fidelidade).
    *   `customer_loyalty_transactions.loyalty_program_id` -> `loyalty_programs.id` (Uma transação pertence a um programa de fidelidade).
    *   `customer_loyalty_transactions.order_id` -> `orders.id` (Uma transação pode estar ligada a um pedido).
    *   `customer_loyalty_transactions.reward_id` -> `loyalty_rewards.id` (Uma transação pode estar ligada a uma recompensa).

**40. `events`**
*   **Objetivo**: Gerencia eventos especiais e reservas privadas.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único do evento.
    *   `establishment_id`: `integer` (Não Nulo) - Referencia `establishments.id`.
    *   `name`: `varchar(255)` (Não Nulo) - Nome do evento (ex: 'Aniversário de João', 'Confraternização da Empresa X').
    *   `description`: `text` - Descrição do evento.
    *   `event_date`: `date` (Não Nulo) - Data do evento.
    *   `start_time`: `time` (Não Nulo) - Hora de início do evento.
    *   `end_time`: `time` - Hora de término do evento.
    *   `max_capacity`: `integer` - Capacidade máxima de pessoas para o evento.
    *   `price_per_person`: `decimal(10, 2)` - Valor fixo por pessoa para pacotes fechados.
    *   `special_menu_id`: `integer` - Referencia `products.id` (Pode ser um produto específico representando um menu, ou uma tabela separada de 'event_menus').
    *   `customer_id`: `integer` - Referencia `customers.id` (Cliente que organizou o evento).
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `events.establishment_id` -> `establishments.id` (Um estabelecimento tem muitos eventos).
    *   `events.special_menu_id` -> `products.id` (Um evento pode ter um menu especial).
    *   `events.customer_id` -> `customers.id` (Um evento pode estar ligado a um cliente).

**41. `delivery_platforms`**
*   **Objetivo**: Configura a integração com plataformas de delivery externas.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único da plataforma de delivery.
    *   `establishment_id`: `integer` (Não Nulo) - Referencia `establishments.id`.
    *   `name`: `varchar(255)` (Não Nulo, Único por estabelecimento) - Nome da plataforma (ex: 'iFood', 'Uber Eats', 'Rappi').
    *   `commission_percentage`: `decimal(5, 2)` (Não Nulo) - Percentual de comissão cobrado pela plataforma.
    *   `api_key`: `text` - Chave de API para integração.
    *   `is_active`: `boolean` (Não Nulo, Padrão: `true`) - Indica se a integração com a plataforma está ativa.
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `delivery_platforms.establishment_id` -> `establishments.id` (Um estabelecimento pode integrar com muitas plataformas de delivery).
    *   `delivery_platform_orders.delivery_platform_id` -> `delivery_platforms.id` (Uma plataforma de delivery pode ter muitos pedidos).

**42. `delivery_platform_orders`**
*   **Objetivo**: Rastreia pedidos originados de plataformas de delivery externas.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único do pedido da plataforma de delivery.
    *   `order_id`: `integer` (Não Nulo, Único) - Referencia `orders.id` (Link para o pedido interno do sistema).
    *   `delivery_platform_id`: `integer` (Não Nulo) - Referencia `delivery_platforms.id`.
    *   `external_order_id`: `varchar(255)` (Não Nulo, Único por plataforma) - ID do pedido na plataforma externa.
    *   `commission_amount`: `decimal(10, 2)` (Não Nulo, Padrão: `0.00`) - Valor da comissão cobrada pela plataforma para este pedido.
    *   `delivery_status`: `varchar(255)` - Status da entrega na plataforma externa.
    *   `estimated_delivery_time`: `timestamp` - Tempo estimado de entrega.
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `delivery_platform_orders.order_id` -> `orders.id` (Um pedido interno pode estar ligado a um pedido de plataforma de delivery).
    *   `delivery_platform_orders.delivery_platform_id` -> `delivery_platforms.id` (Um pedido de plataforma de delivery pertence a uma plataforma).

**43. `customer_feedback`**
*   **Objetivo**: Coleta feedback de clientes sobre produtos e serviços.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único do feedback.
    *   `establishment_id`: `integer` (Não Nulo) - Referencia `establishments.id`.
    *   `customer_id`: `integer` - Referencia `customers.id`.
    *   `order_id`: `integer` - Referencia `orders.id`.
    *   `rating`: `integer` (Não Nulo) - Avaliação (1-5 estrelas).
    *   `comment`: `text` - Comentário do cliente.
    *   `feedback_type`: `customer_feedback_type` (Não Nulo) - Tipo de feedback (product, service, environment).
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
*   **Relações**:
    *   `customer_feedback.establishment_id` -> `establishments.id` (Um estabelecimento tem muitos feedbacks).
    *   `customer_feedback.customer_id` -> `customers.id` (Um feedback pode ser de um cliente).
    *   `customer_feedback.order_id` -> `orders.id` (Um feedback pode estar ligado a um pedido).

**44. `quality_control_checks`**
*   **Objetivo**: Registra verificações de controle de qualidade para diversos aspectos.
*   **Campos**:
    *   `id`: `integer` (Chave Primária, Auto-incremento) - Identificador único da verificação de qualidade.
    *   `establishment_id`: `integer` (Não Nulo) - Referencia `establishments.id`.
    *   `check_type`: `quality_control_check_type` (Não Nulo) - Tipo de verificação (temperature, ingredient_origin, license_validity).
    *   `stock_item_id`: `integer` - Referencia `stock_items.id` (Se a verificação for para um item de estoque).
    *   `product_id`: `integer` - Referencia `products.id` (Se a verificação for para um produto do cardápio).
    *   `check_date`: `date` (Não Nulo) - Data da verificação.
    *   `result`: `varchar(255)` - Resultado da verificação (ex: "pass", "fail", "ok", "non-compliant").
    *   `notes`: `text` - Observações sobre a verificação.
    *   `checked_by_user_id`: `uuid` - Referencia `users.id` (Funcionário que realizou a verificação).
    *   `created_at`: `timestamp` (Padrão: `now()`) - Data e hora de criação do registro.
    *   `updated_at`: `timestamp` (Padrão: `now()`) - Data e hora da última atualização do registro.
*   **Relações**:
    *   `quality_control_checks.establishment_id` -> `establishments.id` (Um estabelecimento tem muitas verificações de qualidade).
    *   `quality_control_checks.stock_item_id` -> `stock_items.id` (Uma verificação pode ser para um item de estoque).
    *   `quality_control_checks.product_id` -> `products.id` (Uma verificação pode ser para um produto).
    *   `quality_control_checks.checked_by_user_id` -> `users.id` (Uma verificação é realizada por um usuário).

---

Espero que esta descrição detalhada ajude a compreender a estrutura do banco de dados e como cada parte se encaixa para suportar as funcionalidades do sistema.
