Project "Sistema de Gestão para Restaurantes e Bares" {
database_type: 'PostgreSQL'
Note: '''
Plataforma multi-tenant com RLS para gerenciar múltiplos estabelecimentos gastronômicos.
Utiliza Supabase PostgreSQL com arquitetura multi-tenant baseada em Row Level Security (RLS).
'''
}

// Enums
enum establishment_operational_status {
active [note: 'Estabelecimento ativo e operacional']
inactive [note: 'Estabelecimento inativo, sem operações']
suspended [note: 'Estabelecimento suspenso por motivos administrativos']
}

enum user_status {
active [note: 'Usuário ativo no sistema']
inactive [note: 'Usuário inativo, sem acesso']
suspended [note: 'Usuário suspenso temporariamente']
}

enum day_of_week {
monday
tuesday
wednesday
thursday
friday
saturday
sunday
}

enum table_shape {
round [note: 'Mesa redonda']
square [note: 'Mesa quadrada']
rectangular [note: 'Mesa retangular']
counter [note: 'Balcão']
}

enum table_status {
available [note: 'Mesa disponível para uso']
occupied [note: 'Mesa ocupada por clientes']
reserved [note: 'Mesa reservada']
maintenance [note: 'Mesa em manutenção']
}

enum reservation_status {
confirmed [note: 'Reserva confirmada']
cancelled [note: 'Reserva cancelada']
attended [note: 'Cliente compareceu à reserva']
no_show [note: 'Cliente não compareceu à reserva']
}

enum product_variation_type {
size [note: 'Variação de tamanho (e.g., pequeno, médio, grande)']
flavor [note: 'Variação de sabor (e.g., chocolate, morango)']
additional [note: 'Adicional (e.g., queijo extra, bacon)']
preparation [note: 'Opção de preparo (e.g., mal passado, bem passado)']
}

enum promotion_type {
happy_hour [note: 'Promoção de happy hour']
quantity_discount [note: 'Desconto por quantidade']
loyalty_discount [note: 'Desconto para clientes fidelidade']
specific_day [note: 'Promoção em dias específicos da semana']
}

enum discount_type {
percentage [note: 'Desconto em porcentagem']
fixed [note: 'Desconto em valor fixo']
}

enum order_type {
local [note: 'Atendimento em mesa no local']
counter [note: 'Pedido para consumo no balcão']
delivery [note: 'Pedido para entrega']
pickup [note: 'Pedido para retirada no estabelecimento']
}

enum order_status {
open [note: 'Comanda aberta, aguardando itens']
sent_to_kitchen [note: 'Pedido enviado para cozinha/bar']
preparing [note: 'Pedido em preparo']
ready [note: 'Pedido pronto para entrega/serviço']
delivered [note: 'Pedido entregue ao cliente']
paid [note: 'Comanda paga e fechada']
cancelled [note: 'Comanda cancelada']
}

enum order_item_status {
pending [note: 'Item pendente de preparo']
preparing [note: 'Item em preparo']
ready [note: 'Item pronto']
delivered [note: 'Item entregue']
cancelled [note: 'Item cancelado']
}

enum stock_item_unit_of_measure {
kg [note: 'Quilograma']
liter [note: 'Litro']
unit [note: 'Unidade']
gram [note: 'Grama']
box [note: 'Caixa']
}

enum stock_movement_type {
entry [note: 'Entrada de estoque (compra, devolução)']
exit [note: 'Saída de estoque (venda, consumo)']
adjustment [note: 'Ajuste de estoque (inventário)']
loss [note: 'Perda de estoque (vencimento, quebra)']
transfer [note: 'Transferência entre locais de armazenamento']
}

enum stock_movement_reason {
sale [note: 'Movimento devido a uma venda']
loss [note: 'Movimento devido a uma perda']
expiration [note: 'Movimento devido a vencimento']
breakage [note: 'Movimento devido a quebra']
free_sample [note: 'Movimento devido a amostra grátis']
purchase [note: 'Movimento devido a compra']
consumption [note: 'Movimento devido a consumo em receita']
}

enum payment_method_type {
cash [note: 'Dinheiro em espécie']
credit_card [note: 'Cartão de crédito']
debit_card [note: 'Cartão de débito']
pix [note: 'Pagamento via PIX']
digital_wallet [note: 'Carteira digital (e.g., PicPay, Mercado Pago)']
meal_voucher [note: 'Vale-refeição']
}

enum cash_session_status {
open [note: 'Sessão de caixa aberta']
closed [note: 'Sessão de caixa fechada']
}

enum cash_session_movement_type {
sale [note: 'Movimento de venda']
withdrawal [note: 'Sangria (retirada de dinheiro)']
reinforcement [note: 'Reforço (entrada adicional de dinheiro)']
cancellation [note: 'Estorno de venda']
expense [note: 'Registro de despesa']
}

enum customer_loyalty_transaction_type {
earned [note: 'Pontos de fidelidade ganhos']
redeemed [note: 'Pontos de fidelidade resgatados']
}

enum customer_feedback_type {
product [note: 'Feedback sobre um produto específico']
service [note: 'Feedback sobre o atendimento']
environment [note: 'Feedback sobre o ambiente do estabelecimento']
}

enum quality_control_check_type {
temperature [note: 'Verificação de temperatura de produtos']
ingredient_origin [note: 'Verificação de origem de ingredientes']
license_validity [note: 'Verificação de validade de licenças e alvarás']
}

// Global Tables (not tenant-specific)
Table establishment_types {
id integer [pk, increment]
name varchar(255) [not null, unique, note: 'Nome do tipo de estabelecimento (e.g., Restaurante, Bar)']
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

Note: 'Define os diferentes tipos de estabelecimentos gastronômicos.'
}

Table subscription_plans {
id integer [pk, increment]
name varchar(255) [not null, unique, note: 'Nome do plano de assinatura (e.g., Básico, Premium)']
description text
price decimal(10, 2) [not null]
features jsonb [note: 'Funcionalidades incluídas no plano, em formato JSON']
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

Note: 'Define os planos de assinatura disponíveis para os estabelecimentos.'
}

Table roles {
id integer [pk, increment]
name varchar(255) [not null, unique, note: 'Nome da função (e.g., Proprietário, Gerente, Garçom)']
description text
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

Note: 'Define as funções hierárquicas dentro do sistema.'
}

Table permissions {
id integer [pk, increment]
name varchar(255) [not null, unique, note: 'Nome da permissão (e.g., create_product, view_reports)']
description text
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

Note: 'Define permissões granulares para módulos do sistema.'
}

Table role_permissions {
role_id integer [not null, ref: > roles.id]
permission_id integer [not null, ref: > permissions.id]
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

indexes {
(role_id, permission_id) [pk]
}
Note: 'Associa permissões a funções.'
}

// Tenant-specific Tables
Table establishments {
id integer [pk, increment]
name varchar(255) [not null, note: 'Nome do estabelecimento']
cnpj varchar(18) [unique, not null, note: 'CNPJ do estabelecimento']
establishment_type_id integer [not null, ref: > establishment_types.id]
address_street varchar(255) [not null]
address_number varchar(50) [not null]
address_complement varchar(255)
address_neighborhood varchar(255) [not null]
address_city varchar(255) [not null]
address_state varchar(2) [not null]
address_zip_code varchar(10) [not null]
subscription_plan_id integer [not null, ref: > subscription_plans.id]
operational_status establishment_operational_status [not null, default: 'active']
table_capacity integer
accepts_delivery boolean [not null, default: false]
accepts_reservations boolean [not null, default: false]
service_fee_percentage decimal(5, 2) [default: 0.00, note: 'Percentual da taxa de serviço']
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

indexes {
cnpj [unique]
}
Note: 'Armazena informações detalhadas de cada estabelecimento (restaurante/bar).'
}

Table operating_hours {
id integer [pk, increment]
establishment_id integer [not null, ref: > establishments.id]
day_of_week day_of_week [not null, note: 'Dia da semana']
opening_time time
closing_time time
is_closed boolean [not null, default: false, note: 'Indica se o estabelecimento está fechado neste dia']
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

indexes {
(establishment_id, day_of_week) [unique]
}
Note: 'Configura os horários de funcionamento diários para cada estabelecimento.'
}

Table users {
id uuid [pk, default: `gen_random_uuid()`, note: 'ID do usuário, integrado com Supabase Auth']
establishment_id integer [not null, ref: > establishments.id]
full_name varchar(255) [not null, note: 'Nome completo do funcionário']
email varchar(255) [not null, note: 'Email do funcionário, único por estabelecimento']
phone_number varchar(20)
role_id integer [not null, ref: > roles.id]
salary decimal(10, 2)
admission_date date
status user_status [not null, default: 'active']
last_login_at timestamp
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

indexes {
(establishment_id, email) [unique]
}
Note: 'Armazena informações dos usuários (funcionários) e integra com o Supabase Auth.'
}

Table user_activity_log {
id integer [pk, increment]
user_id uuid [not null, ref: > users.id]
establishment_id integer [not null, ref: > establishments.id]
action varchar(255) [not null, note: 'Ação realizada pelo usuário (e.g., logged_in, created_order)']
details jsonb [note: 'Detalhes adicionais da ação em formato JSON']
ip_address varchar(45)
created_at timestamp [default: `now()`]

Note: 'Registra as atividades dos usuários para auditoria e segurança.'
}

Table environments {
id integer [pk, increment]
establishment_id integer [not null, ref: > establishments.id]
name varchar(255) [not null, note: 'Nome do ambiente (e.g., Salão Principal, Terraço)']
max_capacity integer [note: 'Capacidade máxima de pessoas para este ambiente']
layout_x integer [note: 'Coordenada X para layout visual']
layout_y integer [note: 'Coordenada Y para layout visual']
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

indexes {
(establishment_id, name) [unique]
}
Note: 'Define ambientes personalizados dentro de um estabelecimento.'
}

Table tables {
id integer [pk, increment]
establishment_id integer [not null, ref: > establishments.id]
environment_id integer [not null, ref: > environments.id]
table_number varchar(50) [not null, note: 'Número ou identificação única da mesa']
shape table_shape [not null]
capacity integer [not null, note: 'Capacidade de pessoas da mesa']
status table_status [not null, default: 'available']
notes text [note: 'Observações especiais sobre a mesa']
layout_x integer [note: 'Coordenada X para layout visual']
layout_y integer [note: 'Coordenada Y para layout visual']
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

indexes {
(establishment_id, table_number) [unique]
}
Note: 'Gerencia as mesas físicas dentro dos ambientes do estabelecimento.'
}

Table reservations {
id integer [pk, increment]
establishment_id integer [not null, ref: > establishments.id]
customer_name varchar(255) [not null]
customer_phone varchar(20) [not null]
customer_email varchar(255)
number_of_people integer [not null]
reservation_date date [not null]
reservation_time time [not null]
status reservation_status [not null, default: 'confirmed']
table_id integer [ref: > tables.id] // Optional, table might be assigned later
notes text
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

indexes {
(establishment_id, reservation_date, reservation_time)
}
Note: 'Gerencia as reservas de clientes para mesas.'
}

Table menu_categories {
id integer [pk, increment]
establishment_id integer [not null, ref: > establishments.id]
name varchar(255) [not null, note: 'Nome da categoria (e.g., Entradas, Pratos Principais)']
description text
icon varchar(255)
color varchar(7) [note: 'Cor para identificação visual (HEX)']
display_order integer [default: 0, note: 'Ordem de exibição no cardápio']
is_seasonal boolean [not null, default: false, note: 'Indica se a categoria é sazonal']
available_from time [note: 'Horário de início de disponibilidade (para sazonal)']
available_until time [note: 'Horário de fim de disponibilidade (para sazonal)']
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

indexes {
(establishment_id, name) [unique]
}
Note: 'Organiza os itens do cardápio em categorias personalizadas.'
}

Table products {
id integer [pk, increment]
establishment_id integer [not null, ref: > establishments.id]
category_id integer [not null, ref: > menu_categories.id]
name varchar(255) [not null, note: 'Nome do produto/prato']
description text
ingredients text [note: 'Lista de ingredientes']
normal_price decimal(10, 2) [not null]
promotional_price decimal(10, 2)
is_promotional boolean [not null, default: false]
calories integer [note: 'Informações nutricionais: calorias']
allergens jsonb [note: 'Informações para alérgicos em formato JSON']
is_vegetarian boolean [not null, default: false]
is_vegan boolean [not null, default: false]
is_gluten_free boolean [not null, default: false]
is_lactose_free boolean [not null, default: false]
preparation_time_minutes integer [note: 'Tempo estimado de preparo em minutos']
is_available boolean [not null, default: true]
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

indexes {
(establishment_id, name) [unique]
}
Note: 'Armazena informações detalhadas sobre cada item do cardápio.'
}

Table product_images {
id integer [pk, increment]
product_id integer [not null, ref: > products.id]
image_url text [not null, note: 'URL da imagem do produto']
display_order integer [default: 0]
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

Note: 'Armazena múltiplas imagens para um produto.'
}

Table product_variations {
id integer [pk, increment]
product_id integer [not null, ref: > products.id]
name varchar(255) [not null, note: 'Nome da variação (e.g., Tamanho, Sabor)']
type product_variation_type [not null]
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

indexes {
(product_id, name) [unique]
}
Note: 'Define tipos de variações para um produto (e.g., tamanho, sabor).'
}

Table variation_options {
id integer [pk, increment]
variation_id integer [not null, ref: > product_variations.id]
option_name varchar(255) [not null, note: 'Nome da opção (e.g., Pequeno, Médio, Mal Passado)']
price_adjustment decimal(10, 2) [default: 0.00, note: 'Ajuste de preço para esta opção (pode ser negativo)']
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

indexes {
(variation_id, option_name) [unique]
}
Note: 'Define opções específicas para uma variação de produto.'
}

Table combos {
id integer [pk, increment]
establishment_id integer [not null, ref: > establishments.id]
name varchar(255) [not null, note: 'Nome do combo ou agrupamento de produtos']
description text
discount_percentage decimal(5, 2) [not null, note: 'Percentual de desconto aplicado ao combo']
start_date date
end_date date
is_active boolean [not null, default: true]
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

indexes {
(establishment_id, name) [unique]
}
Note: 'Define combos de produtos com descontos.'
}

Table combo_products {
combo_id integer [not null, ref: > combos.id]
product_id integer [not null, ref: > products.id]
quantity integer [not null, default: 1]
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

indexes {
(combo_id, product_id) [pk]
}
Note: 'Associa produtos a combos específicos.'
}

Table promotions {
id integer [pk, increment]
establishment_id integer [not null, ref: > establishments.id]
name varchar(255) [not null, note: 'Nome da promoção']
description text
promotion_type promotion_type [not null]
discount_value decimal(10, 2) [not null, note: 'Valor do desconto (fixo ou percentual)']
discount_type discount_type [not null]
start_date timestamp [not null]
end_date timestamp [not null]
is_active boolean [not null, default: true]
min_quantity integer [note: 'Quantidade mínima para aplicar o desconto (para promoções de quantidade)']
day_of_week day_of_week [note: 'Dia da semana para promoções específicas']
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

Note: 'Gerencia vários tipos de promoções para o estabelecimento.'
}

Table orders {
id integer [pk, increment]
establishment_id integer [not null, ref: > establishments.id]
order_date date [not null, default: `current_date`, note: 'Data do pedido para numeração sequencial diária']
order_number varchar(50) [not null, note: 'Número sequencial da comanda/pedido por dia']
order_type order_type [not null]
table_id integer [ref: > tables.id]
waiter_id uuid [ref: > users.id]
customer_id integer [ref: > customers.id] // For loyalty/delivery
delivery_address_street varchar(255)
delivery_address_number varchar(50)
delivery_address_complement varchar(255)
delivery_address_neighborhood varchar(255)
delivery_address_city varchar(255)
delivery_address_state varchar(2)
delivery_address_zip_code varchar(10)
status order_status [not null, default: 'open']
subtotal decimal(10, 2) [not null, default: 0.00]
service_fee_amount decimal(10, 2) [not null, default: 0.00]
delivery_fee_amount decimal(10, 2) [not null, default: 0.00]
discount_amount decimal(10, 2) [not null, default: 0.00]
total_amount decimal(10, 2) [not null, default: 0.00]
notes text
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

indexes {
(establishment_id, order_date, order_number) [unique]
(establishment_id, created_at)
(establishment_id, status)
}
Note: 'Representa uma comanda ou pedido de cliente.'
}

Table order_items {
id integer [pk, increment]
order_id integer [not null, ref: > orders.id]
product_id integer [not null, ref: > products.id]
quantity integer [not null]
unit_price decimal(10, 2) [not null, note: 'Preço do produto no momento do pedido']
total_price decimal(10, 2) [not null]
status order_item_status [not null, default: 'pending']
notes text [note: 'Observações especiais para o item (e.g., sem cebola)']
cancellation_reason text
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

Note: 'Detalha os produtos incluídos em um pedido.'
}

Table order_item_variations {
id integer [pk, increment]
order_item_id integer [not null, ref: > order_items.id]
variation_option_id integer [not null, ref: > variation_options.id]
price_adjustment decimal(10, 2) [not null, default: 0.00, note: 'Ajuste de preço para esta opção específica no pedido']
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

indexes {
(order_item_id, variation_option_id) [unique]
}
Note: 'Armazena as variações selecionadas para um item de pedido.'
}

Table suppliers {
id integer [pk, increment]
establishment_id integer [not null, ref: > establishments.id]
name varchar(255) [not null, note: 'Nome do fornecedor']
cnpj_cpf varchar(18) [unique, not null, note: 'CNPJ ou CPF do fornecedor']
contact_person varchar(255)
phone varchar(20)
email varchar(255)
address_street varchar(255)
address_number varchar(50)
address_complement varchar(255)
address_neighborhood varchar(255)
address_city varchar(255)
address_state varchar(2)
address_zip_code varchar(10)
payment_terms text [note: 'Condições de pagamento']
special_conditions text
rating decimal(3, 2) [note: 'Avaliação do fornecedor (e.g., 4.5)']
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

indexes {
(establishment_id, cnpj_cpf) [unique]
}
Note: 'Gerencia informações sobre os fornecedores de produtos.'
}

Table stock_categories {
id integer [pk, increment]
establishment_id integer [not null, ref: > establishments.id]
name varchar(255) [not null, note: 'Nome da categoria de estoque (e.g., Carnes, Bebidas)']
color varchar(7) [note: 'Cor para identificação visual (HEX)']
parent_category_id integer [ref: > stock_categories.id] // Self-referencing for subcategories
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

indexes {
(establishment_id, name) [unique]
}
Note: 'Categoriza os itens de estoque para melhor organização.'
}

Table stock_items {
id integer [pk, increment]
establishment_id integer [not null, ref: > establishments.id]
category_id integer [not null, ref: > stock_categories.id]
name varchar(255) [not null, note: 'Nome do item de estoque']
description text
barcode varchar(255) [unique, note: 'Código de barras do item']
unit_of_measure stock_item_unit_of_measure [not null]
storage_location varchar(255) [note: 'Local físico de armazenamento']
min_stock_level integer [default: 0, note: 'Nível mínimo de estoque para alerta']
preferred_supplier_id integer [ref: > suppliers.id]
current_cost_price decimal(10, 2) [note: 'Custo atual do item em estoque']
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

indexes {
(establishment_id, name) [unique]
(establishment_id, barcode) [unique]
}
Note: 'Armazena informações detalhadas sobre cada item no estoque.'
}

Table stock_batches {
id integer [pk, increment]
stock_item_id integer [not null, ref: > stock_items.id]
supplier_id integer [ref: > suppliers.id]
batch_number varchar(255) [note: 'Número do lote']
quantity integer [not null]
expiration_date date [note: 'Data de validade do lote']
purchase_price decimal(10, 2) [not null]
entry_date date [not null]
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

indexes {
(stock_item_id, batch_number) [unique]
}
Note: 'Gerencia lotes específicos de itens de estoque, especialmente para perecíveis.'
}

Table stock_movements {
id integer [pk, increment]
establishment_id integer [not null, ref: > establishments.id]
stock_item_id integer [not null, ref: > stock_items.id]
movement_type stock_movement_type [not null]
quantity integer [not null]
reference_document varchar(255) [note: 'Documento de referência (e.g., NF, requisição)']
responsible_user_id uuid [ref: > users.id]
reason stock_movement_reason [note: 'Motivo detalhado da movimentação']
cost_at_movement decimal(10, 2) [not null, note: 'Custo do item no momento da movimentação']
created_at timestamp [default: `now()`]

indexes {
(establishment_id, stock_item_id, created_at)
}
Note: 'Registra todas as movimentações de itens de estoque.'
}

Table recipes {
id integer [pk, increment]
establishment_id integer [not null, ref: > establishments.id]
product_id integer [not null, ref: > products.id, unique, note: 'Produto final que esta receita produz']
name varchar(255) [not null, note: 'Nome da receita (e.g., Receita de Pizza Margherita)']
description text
preparation_instructions text
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

Note: 'Define a composição de um produto do cardápio.'
}

Table recipe_ingredients {
id integer [pk, increment]
recipe_id integer [not null, ref: > recipes.id]
stock_item_id integer [not null, ref: > stock_items.id]
quantity_needed decimal(10, 3) [not null, note: 'Quantidade exata do ingrediente necessária']
unit_of_measure stock_item_unit_of_measure [not null, note: 'Unidade de medida para este ingrediente na receita']
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

indexes {
(recipe_id, stock_item_id) [unique]
}
Note: 'Associa itens de estoque como ingredientes a receitas.'
}

Table payment_methods {
id integer [pk, increment]
establishment_id integer [not null, ref: > establishments.id]
name varchar(255) [not null, note: 'Nome da forma de pagamento (e.g., Dinheiro, Cartão de Crédito)']
type payment_method_type [not null]
operator_fee_percentage decimal(5, 2) [default: 0.00, note: 'Taxa percentual da operadora (se aplicável)']
receipt_term_days integer [default: 0, note: 'Prazo de recebimento em dias (D+0, D+1, etc.)']
is_active boolean [not null, default: true]
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

indexes {
(establishment_id, name) [unique]
}
Note: 'Configura as formas de pagamento disponíveis para um estabelecimento.'
}

Table cash_sessions {
id integer [pk, increment]
establishment_id integer [not null, ref: > establishments.id]
opened_by_user_id uuid [not null, ref: > users.id]
opening_balance decimal(10, 2) [not null, default: 0.00]
closing_balance decimal(10, 2)
actual_cash_amount decimal(10, 2) [note: 'Valor em dinheiro contado no fechamento']
status cash_session_status [not null, default: 'open']
opening_time timestamp [not null, default: `now()`]
closing_time timestamp
notes text
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

Note: 'Gerencia as sessões diárias de caixa.'
}

Table cash_session_movements {
id integer [pk, increment]
cash_session_id integer [not null, ref: > cash_sessions.id]
movement_type cash_session_movement_type [not null]
payment_method_id integer [ref: > payment_methods.id]
amount decimal(10, 2) [not null]
order_id integer [ref: > orders.id] // For sales/cancellations
description text [note: 'Justificativa ou detalhes da movimentação']
created_at timestamp [default: `now()`]

Note: 'Registra todas as movimentações financeiras dentro de uma sessão de caixa.'
}

Table order_payments {
id integer [pk, increment]
order_id integer [not null, ref: > orders.id]
payment_method_id integer [not null, ref: > payment_methods.id]
amount_paid decimal(10, 2) [not null]
transaction_id varchar(255) [note: 'ID da transação para pagamentos eletrônicos']
change_given decimal(10, 2) [default: 0.00, note: 'Valor do troco dado (para pagamentos em dinheiro)']
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

Note: 'Registra os pagamentos efetuados para um pedido, suportando pagamentos parciais e divididos.'
}

Table expenses {
id integer [pk, increment]
establishment_id integer [not null, ref: > establishments.id]
description text [not null, note: 'Descrição da despesa']
amount decimal(10, 2) [not null]
expense_date date [not null]
category varchar(255) [note: 'Categoria da despesa (e.g., aluguel, contas de consumo)']
paid_by_user_id uuid [ref: > users.id]
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

Note: 'Registra as despesas operacionais do estabelecimento.'
}

Table customers {
id integer [pk, increment]
establishment_id integer [not null, ref: > establishments.id]
full_name varchar(255) [not null]
email varchar(255) [unique, note: 'Email do cliente, único por estabelecimento']
phone_number varchar(20)
birth_date date
preferences jsonb [note: 'Preferências do cliente em formato JSON']
total_spent decimal(10, 2) [default: 0.00, note: 'Total gasto pelo cliente no estabelecimento']
loyalty_points integer [default: 0, note: 'Pontos de fidelidade acumulados']
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

indexes {
(establishment_id, email) [unique]
}
Note: 'Gerencia dados de clientes para programas de fidelidade e personalização.'
}

Table loyalty_programs {
id integer [pk, increment]
establishment_id integer [not null, ref: > establishments.id]
name varchar(255) [not null, note: 'Nome do programa de fidelidade']
points_per_currency_unit decimal(10, 2) [not null, note: 'Quantos pontos por unidade monetária gasta']
is_active boolean [not null, default: true]
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

indexes {
(establishment_id, name) [unique]
}
Note: 'Define as regras dos programas de fidelidade para um estabelecimento.'
}

Table loyalty_rewards {
id integer [pk, increment]
loyalty_program_id integer [not null, ref: > loyalty_programs.id]
name varchar(255) [not null, note: 'Nome da recompensa (e.g., Desconto de 10%, Sobremesa Grátis)']
description text
points_cost integer [not null, note: 'Custo em pontos para resgatar a recompensa']
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

Note: 'Define as recompensas que podem ser resgatadas com pontos de fidelidade.'
}

Table customer_loyalty_transactions {
id integer [pk, increment]
customer_id integer [not null, ref: > customers.id]
loyalty_program_id integer [not null, ref: > loyalty_programs.id]
transaction_type customer_loyalty_transaction_type [not null]
points_amount integer [not null]
order_id integer [ref: > orders.id] // If points earned from order
reward_id integer [ref: > loyalty_rewards.id] // If points redeemed for reward
created_at timestamp [default: `now()`]

Note: 'Rastreia os movimentos de pontos de fidelidade dos clientes.'
}

Table events {
id integer [pk, increment]
establishment_id integer [not null, ref: > establishments.id]
name varchar(255) [not null, note: 'Nome do evento (e.g., Aniversário, Confraternização)']
description text
event_date date [not null]
start_time time [not null]
end_time time
max_capacity integer [note: 'Capacidade máxima de pessoas para o evento']
price_per_person decimal(10, 2) [note: 'Valor fixo por pessoa para pacotes fechados']
special_menu_id integer [ref: > products.id] // Could be a specific product representing a menu, or a separate 'event_menus' table
customer_id integer [ref: > customers.id] // Or reservation_id if linked to a reservation
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

Note: 'Gerencia eventos especiais e reservas privadas.'
}

Table delivery_platforms {
id integer [pk, increment]
establishment_id integer [not null, ref: > establishments.id]
name varchar(255) [not null, unique, note: 'Nome da plataforma de delivery (e.g., iFood, Uber Eats)']
commission_percentage decimal(5, 2) [not null, note: 'Percentual de comissão cobrado pela plataforma']
api_key text [note: 'Chave de API para integração']
is_active boolean [not null, default: true]
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

indexes {
(establishment_id, name) [unique]
}
Note: 'Configura a integração com plataformas de delivery externas.'
}

Table delivery_platform_orders {
id integer [pk, increment]
order_id integer [not null, ref: > orders.id, unique, note: 'Link para o pedido interno do sistema']
delivery_platform_id integer [not null, ref: > delivery_platforms.id]
external_order_id varchar(255) [not null, note: 'ID do pedido na plataforma externa']
commission_amount decimal(10, 2) [not null, default: 0.00]
delivery_status varchar(255) [note: 'Status da entrega na plataforma externa']
estimated_delivery_time timestamp
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

indexes {
(delivery_platform_id, external_order_id) [unique]
}
Note: 'Rastreia pedidos originados de plataformas de delivery externas.'
}

Table customer_feedback {
id integer [pk, increment]
establishment_id integer [not null, ref: > establishments.id]
customer_id integer [ref: > customers.id]
order_id integer [ref: > orders.id]
rating integer [not null, note: 'Avaliação (1-5 estrelas)']
comment text
feedback_type customer_feedback_type [not null]
created_at timestamp [default: `now()`]

Note: 'Coleta feedback de clientes sobre produtos e serviços.'
}

Table quality_control_checks {
id integer [pk, increment]
establishment_id integer [not null, ref: > establishments.id]
check_type quality_control_check_type [not null]
stock_item_id integer [ref: > stock_items.id] // If check is for a stock item
product_id integer [ref: > products.id] // If check is for a menu product
check_date date [not null]
result varchar(255) [note: 'Resultado da verificação (e.g., "pass", "fail")']
notes text
checked_by_user_id uuid [ref: > users.id]
created_at timestamp [default: `now()`]
updated_at timestamp [default: `now()`]

Note: 'Registra verificações de controle de qualidade para diversos aspectos. Um check deve referenciar ou um stock_item_id ou um product_id.'
}