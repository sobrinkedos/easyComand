#!/usr/bin/env node

/**
 * Gerenciador de Migra√ß√µes MCP (Model Context Protocol)
 * Este script verifica o status das migra√ß√µes e fornece instru√ß√µes para aplic√°-las
 */

import * as fs from 'fs'
import * as path from 'path'
import { createClient } from '@supabase/supabase-js'

interface Migration {
  id: string;
  name: string;
  path: string;
  applied: boolean;
}

async function runMCPMigrationManager() {
  console.log('üîÑ Gerenciador de Migra√ß√µes MCP')
  console.log('==============================\n')
  
  // Carregar vari√°veis de ambiente
  loadEnvVariables();
  
  // Configura√ß√£o do Supabase
  const supabaseUrl = process.env.VITE_SUPABASE_URL
  const supabaseAnonKey = process.env.VITE_SUPABASE_ANON_KEY
  
  if (!supabaseUrl || !supabaseAnonKey) {
    console.error('‚ùå Configura√ß√µes do Supabase incompletas!')
    console.log('üí° Verifique se VITE_SUPABASE_URL e VITE_SUPABASE_ANON_KEY est√£o configuradas no .env')
    process.exit(1)
  }
  
  // Criar cliente Supabase
  const supabase = createClient(supabaseUrl, supabaseAnonKey)
  
  // Listar migra√ß√µes dispon√≠veis
  const migrations = await listMigrations();
  
  if (migrations.length === 0) {
    console.log('‚úÖ Nenhuma migra√ß√£o pendente encontrada')
    process.exit(0)
  }
  
  console.log(`üìù ${migrations.length} migra√ß√µes encontradas:`)
  migrations.forEach((migration, index) => {
    const status = migration.applied ? '‚úÖ Aplicada' : '‚è≥ Pendente'
    console.log(`   ${index + 1}. ${migration.id} - ${migration.name} (${status})`)
  })
  
  console.log('')
  
  // Verificar quais migra√ß√µes j√° foram aplicadas
  const pendingMigrations = migrations.filter(m => !m.applied)
  
  if (pendingMigrations.length === 0) {
    console.log('‚úÖ Todas as migra√ß√µes j√° foram aplicadas!')
    process.exit(0)
  }
  
  console.log(`‚è≥ ${pendingMigrations.length} migra√ß√µes pendentes:`)
  pendingMigrations.forEach((migration, index) => {
    console.log(`   ${index + 1}. ${migration.id} - ${migration.name}`)
  })
  
  console.log('\nüìã Instru√ß√µes para aplicar as migra√ß√µes:')
  console.log('========================================')
  
  pendingMigrations.forEach((migration, index) => {
    console.log(`\nüîß Migra√ß√£o ${index + 1}: ${migration.name}`)
    console.log(`   ID: ${migration.id}`)
    
    // Ler conte√∫do da migra√ß√£o
    if (fs.existsSync(migration.path)) {
      const content = fs.readFileSync(migration.path, 'utf-8')
      console.log(`   Conte√∫do:`)
      console.log(`   --------`)
      console.log(content)
      console.log(`   --------`)
    }
    
    console.log(`   Instru√ß√µes:`)
    console.log(`   1. Acesse o painel do Supabase (https://app.supabase.com)`)
    console.log(`   2. Selecione seu projeto`)
    console.log(`   3. V√° para "SQL Editor" no menu lateral`)
    console.log(`   4. Cole o conte√∫do acima no editor`)
    console.log(`   5. Clique em "RUN" para executar`)
    console.log(`   6. Ap√≥s executar, marque a migra√ß√£o como aplicada`)
  })
  
  console.log('\nüí° Dica: Ap√≥s aplicar todas as migra√ß√µes, execute este script novamente para verificar o status.')
}

function loadEnvVariables() {
  const envPath = path.join(process.cwd(), '.env')
  if (fs.existsSync(envPath)) {
    const envContent = fs.readFileSync(envPath, 'utf-8')
    const lines = envContent.split('\n')
    
    for (const line of lines) {
      if (line.trim() && !line.startsWith('#')) {
        const [key, ...valueParts] = line.split('=')
        const value = valueParts.join('=').trim().replace(/^"(.*)"$/, '$1').replace(/^'(.*)'$/, '$1')
        process.env[key.trim()] = value
      }
    }
  }
}

async function listMigrations(): Promise<Migration[]> {
  const migrationsDir = path.join(process.cwd(), 'supabase', 'migrations')
  
  if (!fs.existsSync(migrationsDir)) {
    console.error('‚ùå Diret√≥rio de migra√ß√µes n√£o encontrado!')
    return []
  }
  
  const files = fs.readdirSync(migrationsDir)
    .filter(file => file.endsWith('.sql'))
    .sort()
  
  const migrations: Migration[] = []
  
  for (const file of files) {
    const migrationId = file.split('_')[0]
    const migrationName = file.split('_').slice(1).join('_').replace('.sql', '')
    const migrationPath = path.join(migrationsDir, file)
    
    // Verificar se a migra√ß√£o j√° foi aplicada (simplificado)
    const applied = await checkIfMigrationApplied(migrationId)
    
    migrations.push({
      id: migrationId,
      name: migrationName,
      path: migrationPath,
      applied
    })
  }
  
  return migrations
}

async function checkIfMigrationApplied(migrationId: string): Promise<boolean> {
  // Esta √© uma verifica√ß√£o simplificada
  // Em um sistema real, isso verificaria em uma tabela de controle de migra√ß√µes
  return false
}

// Executar o gerenciador
runMCPMigrationManager().catch(console.error)